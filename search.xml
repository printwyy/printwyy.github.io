<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PINN学习笔记</title>
      <link href="/2023/08/21/PINN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/21/PINN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="研究背景"><a href="#研究背景" class="headerlink" title="研究背景"></a>研究背景</h2><h3 id="问题提出：如何建模和预测多物理和多尺度系统的动力学？"><a href="#问题提出：如何建模和预测多物理和多尺度系统的动力学？" class="headerlink" title="问题提出：如何建模和预测多物理和多尺度系统的动力学？"></a>问题提出：如何建模和预测多物理和多尺度系统的动力学？</h3><p>​例如，地球系统是一个独特复杂的系统，其动力学受到时空尺度上发生的物理、化学和生物过程相互作用的复杂控制等。</p><p>​现有的传统方法：有限差分、有限元、光谱以及无网格方法数值求解偏微分方程（PDE）。</p><p>&emsp;&emsp;但这些方法存在一些局限性问题：</p><p>​1、非线性多尺度系统带来<strong>高昂成本</strong>和<strong>多种不确定性来源</strong>；</p><p>​2、求解<strong>逆问题</strong>（如，推断功能材料中的材料特性）<strong>代价高昂</strong>，需要复杂公式、新算法和代码；</p><p>​3、无法解决具有<strong>缺失</strong>、<strong>间隙</strong>或<strong>噪声边界条件</strong>的实际物理问题；</p><p>​综上所述，<strong>需要一种普遍接受的建模和预测方法，应对现有大量的（具有时空变异性）观测数据，同时可以满足现实世界的物理规则。</strong>PINN的框架思想应运而生。</p><h3 id="目前所求解的问题类型以及传统ML算法的局限性"><a href="#目前所求解的问题类型以及传统ML算法的局限性" class="headerlink" title="目前所求解的问题类型以及传统ML算法的局限性"></a>目前所求解的问题类型以及传统ML算法的局限性</h3><p>​我们将物理世界中求解的各种问题总结为三大类，如下图所示：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e2fffd999fd.png" alt="图片 1.png"></p><p>​1、左侧（经典方法）：小数据，了解所有物理知识；</p><p>​2、<strong>中间（</strong>PINN<strong>）：部分数据，缺少一些参数值或偏微分方程的部分项（求正、反问题，最常见）</strong>；</p><p>​3、右侧（系统验证&#x2F;发现）：完全数据驱动，不含任何物理知识（DeepONet），类似于大模型等；</p><p>​而传统的深度学习和机器学习算法常用于解决自动提取数据特征分析等问题，其算法本身存在一定的局限性：</p><p>​1、多数ML方法目前都<strong>无法从数据洪流中提取可解释的信息和知识</strong>；</p><p>​2、由于观测数据偏差，预测可能<strong>在物理上不一致或不可信</strong>，导致较差的泛化性能；</p><p>​3、得到的结果大部分不满足物理知识；</p><p>​为了采用DL算法来更高效的解决中间问题，提出了PINN算法思想：提供物理规则（或信息先验）等基本物理规律和领域知识优势，从而提高学习算法的性能</p><h3 id="PINN优点"><a href="#PINN优点" class="headerlink" title="PINN优点"></a>PINN优点</h3><p>&emsp;1、<strong>应对不完美的模型和噪声数据</strong>：PINN公式具有平衡性、规则性；无需昂贵的网络生成；</p><p>&emsp;2、<strong>小数据领域上具有强泛化性</strong>：嵌入物理知识从而约束&#x2F;惩罚深度学习模型，减少高精度必要训练数据的数量；</p><p>&emsp;&emsp;3、<strong>有助于理解深度学习模型</strong>：阐明深度学习背后的内在机制；</p><p>&emsp;&emsp;4、<strong>处理高维度数据</strong>：深度学习模型学习高维度数据的样本分布，用于精细分辨率的图像分类、语言建模和高维PDE求解等问题；</p><p>&emsp;&emsp;5、<strong>量化不确定性</strong>：可靠预测多尺度和多物理系统的演化，用于解决物理系统（如参数的随机性）、数据（噪声）、模型（难以量化）的不确定性；</p><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><h3 id="PINN原理概述"><a href="#PINN原理概述" class="headerlink" title="PINN原理概述"></a>PINN原理概述</h3><p>通过使用自动微分将<strong>偏微分方程嵌入神经网络的损失函数</strong>，PINN无缝集成了来自测量和偏微分方程PDE的信息。</p><p>考虑解决以下PDE问题：<br>$$<br>𝑢_𝑡+𝑁(𝑢;𝜆)&#x3D;0<br>$$<br>其中u(t,x)是需要求的潜在解，N(u;λ)是关于这个解的非线性操作算子（如偏导数），λ是待定参数。</p><p>那么现在存在两种情况：</p><p>​    1、参数λ已知时，如何求未知解u(t,x)；</p><p>​    2、参数λ未知时，如何求解u(t,x)的同时确定参数λ；</p><p>根据上述公式得到：<br>$$<br>𝑓(𝑡,𝑥):&#x3D;𝑢_𝑡+𝑁(𝑢;𝜆)<br>$$<br>PINN使用神经网络来逼近u(t,x)和f(t,x)，且这两个网络共享参数（基于神经网络自动微分的功能，链式法则）</p><h3 id="PINN网络框架"><a href="#PINN网络框架" class="headerlink" title="PINN网络框架"></a>PINN网络框架</h3><p>具体操作：首先定义一个网络来拟合u(t,x)，然后f(t,x)可接在u(t,x)后面再加上一些操作算子。</p><p>定义损失函数：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e3094a9e1e3.png" alt="截屏2023-08-21 14.50.39.png"></p><p>MSE_u（数据损失函数）表示在初始和边界条件处神经网络的拟合值与真实值的均方误差；MSE_f（物理损失函数）表示的是神经网络与真实物理规律的均方误差。当LOSS趋近于0时，我们可以得到PDE的精确解。</p><p>&emsp;<strong>那么，如何将先验物理知识嵌入进神经网络呢？学习</strong></p><h3 id="求解一阶非线性Schrödinger方程"><a href="#求解一阶非线性Schrödinger方程" class="headerlink" title="求解一阶非线性Schrödinger方程"></a>求解一阶非线性Schrödinger方程</h3><p>&emsp;&emsp;方程如下：其中h(t,x)为复数函数， u是实部，v是虚部</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30a11c1cb7.png" alt="截屏2023-08-21 14.53.49.png"></p><p>  根据薛定谔方程构造损失函数：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30a9fa89f4.png" alt="截屏2023-08-21 14.56.20.png"></p><p>MSE_0是初始条件损失函数， MSE_b是周期条件损失函数，MSE_f是偏微分方程构造的损失函数，当损失函数趋近于0时，可以得到PDE较为精确的结果。</p><p>在具体代码实现中，损失函数l的具体形式如下：<br>$$<br>𝑙&#x3D;𝑙_1+ 𝑙_2+ 𝑙_3+ 𝑙_4+ 𝑙_5+ 𝑙_6+ 𝑙_7+ 𝑙_8<br>$$<br><img src="https://x.imgs.ovh/x/2023/08/21/64e30b2887df0.png" alt="截屏2023-08-21 14.58.21.png"></p><p>PINN求解<strong>目标：推断薛定谔方程的整个时空解</strong> <strong>h(t,x)</strong></p><p>神经网络架构如下：使用5层神经网络来描述潜在函数h(t,x)&#x3D;[u(t,x),v(t,x)]，每层100个神经元，使用双曲正切激活函数。控制<strong>输入</strong>-<strong>输出之间的网络参数训练过程</strong>，使其生成结果与输入变量之间尽量保持一定的物理关系</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30b77af865.png" alt="图片 1.png"></p><p>训练50000次后的输出结果如下：其中$|ℎ(𝑡,𝑥)|&#x3D;√(𝑢^2 (𝑡,𝑥)+𝑣^2 (𝑡,𝑥))$ 。可以看到仅使用少量初始数据，物理信息神经网络就能准确捕捉薛定谔方程错综复杂的非线性行为。</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30bff3cef1.png" alt="3.png"></p><h2 id="求解实验"><a href="#求解实验" class="headerlink" title="求解实验"></a>求解实验</h2><h3 id="一维Burgers方程"><a href="#一维Burgers方程" class="headerlink" title="一维Burgers方程"></a>一维Burgers方程</h3><p>在一维上的Burgers方程与边界条件如下：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30c80871ca.png" alt="截屏2023-08-21 15.04.24.png"></p><p>1、<strong>定义f(t,x)方程</strong>：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30cc9e6a3f.png" alt="4.png"></p><p>2、<strong>通过深度神经网络逼近u_t</strong>，即u(t,x)。</p><p>代码定义：<img src="https://x.imgs.ovh/x/2023/08/21/64e30cf614a84.png" alt="5.png"></p><p>3、设计神经网络损失函数：<br>$$<br>MSE&#x3D;MSE_u+MSE_f<br>$$<br><img src="https://x.imgs.ovh/x/2023/08/21/64e30d46f1fcb.png" alt="截屏2023-08-21 15.07.42.png"></p><p>4、网络结构</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30d7497be7.png" alt="6.png"></p><p>5、下图是我们在数据驱动下求解Burgers 方程的结果：</p><p><img src="https://x.imgs.ovh/x/2023/08/21/64e30d956c557.png" alt="7.png"></p><h2 id="应用及局限性"><a href="#应用及局限性" class="headerlink" title="应用及局限性"></a>应用及局限性</h2><p>应用：用于流体力学、量子化学、材料科学、分子模拟、地球物理学等问题中。</p><p>PINN这种方法或者思想可以弥补科学机器学习领域中单纯数据驱动的弱点。如果把传统数值格式认为是单纯物理知识驱动，那么PINN或者更广义一点的内嵌物理知识机器学习就是数据驱动与知识驱动的融合方法。</p><p>1、<strong>多尺度和多物理向题</strong>：可能很难学习高频函数，多个物理过程可能很难通过一个PINN得以实现（每个物理场分别训练，通过并行的架构结合到一起，学习一个耦合解）；</p><p>2、<strong>新算法和计算框架</strong>：训练过程可能不够稳健，无法保证向全局最小值的收敛（设计合适的框架和训练算法等）；</p><p>&emsp;3、<strong>数据</strong>：缺少有价值的实验数据集，以及生成这些数据集所需要的物理模型和所有参数（研究人员完善）；</p><p>&emsp;&emsp;4、<strong>新理论</strong>：缺少一种新理论，来严格分析物理知识学习的能力和局限性。</p><p>   总而言之，基于物理知识的学习即使在噪声数据和高维环境中也能无缝地集成数据和数学模型，并能非常有效地解决一般的逆问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学术相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> AI for science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论——第三次作业解析</title>
      <link href="/2023/07/14/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/07/14/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="匹配与因子分解"><a href="#匹配与因子分解" class="headerlink" title="匹配与因子分解"></a>匹配与因子分解</h2><br><div class="pdfobject-container" data-target="/pdf/t3.pdf" data-height="1000px"></div><br>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业解析 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 因子分解 </tag>
            
            <tag> 匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论——第二次作业解析</title>
      <link href="/2023/07/14/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/07/14/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="图连通度、欧拉图、哈密尔顿图"><a href="#图连通度、欧拉图、哈密尔顿图" class="headerlink" title="图连通度、欧拉图、哈密尔顿图"></a>图连通度、欧拉图、哈密尔顿图</h2><br><div class="pdfobject-container" data-target="/pdf/t2.pdf" data-height="1000px"></div><br>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业解析 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 连通度 </tag>
            
            <tag> 欧拉图 </tag>
            
            <tag> 哈密尔顿图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论——第一次作业解析</title>
      <link href="/2023/07/13/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/"/>
      <url>/2023/07/13/%E5%9B%BE%E8%AE%BA%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="树和相关基础概念"><a href="#树和相关基础概念" class="headerlink" title="树和相关基础概念"></a>树和相关基础概念</h2><br><div class="pdfobject-container" data-target="/pdf/t1.pdf" data-height="1000px"></div><br>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业解析 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 树 </tag>
            
            <tag> 基础概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全传输模型代码设计实践</title>
      <link href="/2023/07/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/07/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h2><p>该程序功能包含：<br>（1）申请生成一对公私钥：服务器和客户端各拥有一对不同的RSA公私钥，用于加解密、数字签名等；<br>（2）加解密：服务器与客户端之间使用DES对称密码算法加解密传输的消息，生成密文信息。<br>（3）数字签名：发送方对交互的消息进行哈希计算后，使用自己的私钥对其进行签名计算，得到消息哈希值签名后的结果。接收方收到数据后使用发送方的公钥验证签名。<br>（4）数字信封：发送方使用接收方的公钥加密对称密钥K生成数字信封，将其拼接在密文后。接收方收到数据首先使用自己的私钥打开数字信封，得到对称密钥K。<br>（5）消息认证：接收方收到数据包，并对其解密后得到明文m和签名s。首先使用发送者公钥计算验证签名的真实性，同时得到签名前的明文哈希值h2。然后接收方将明文m进行哈希计算后得到哈希值h1，用h1与h2比较是否相等来验证消息的完整性。</p><h2 id="相关依赖软件包"><a href="#相关依赖软件包" class="headerlink" title="相关依赖软件包"></a>相关依赖软件包</h2><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><p>Crypto是 Python 中密码学方面最有名的第三方软件包。Crypto能实现大致3种类型的数据加密（单向加密、对称加密 和非对称加密），其中Python的base64模块加密和基于Crypto模块的加密。<br>单向加密：Crypto.Hash，其中中包含MD5、SHA1、SHA256等<br>对称加密：Crypto.Cipher，如常见的DES等<br>非对称加密：Crypto.Cipher，如常见的AES加密等<br>随机数操作：Crypto.Random，也可以使用Python内置的random模块和secrets模块产生<br>数字签名与验签：可能需要使用到 Crypto.PublicKey，Crypto.Hash，Crypto.Signature</p><h3 id="pyDes"><a href="#pyDes" class="headerlink" title="pyDes"></a>pyDes</h3><p>pyDES是一个Python的模块,用来提供 DES、Triple-DES 的加密算法。在使用pyDes实现DES加密时，初始化des是必须要8位密码，但是我们可以先通过使用一个随意的8位密钥先初始化des对象，然后调用setkey()方法传入超过8位的密钥重置。</p><h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><p>程序由两个部分组成，一个为server一个为client，通过Socket TCP进行数据交互，其中每个部分在进行通信交互时的加解密方案相同。方案中，通过RSA算法实现双方的部分加解密、数字签名和数字信封功能，其中哈希算法采用SHA256用于消息认证，使用DES对称加密算法实现明文加解密。</p><p>首先各自使用RSA算法生成一对公私钥，server进入监听等待client与它建立连接；建立连接后双方交换公钥以便接下来的通信加解密认证；开始发送信息，用户输入明文消息，后台首先对此次会话生成用于DES加解密的一次性密钥k，使用SHA256计算明文hash值，发送方用自己的私钥在明文哈希上签名，将明文与签名后的hash拼接后，发送方基于DES加密算法用k加密明文与签名，得到加密结果；发送方用接收方的公钥加密会话密钥k，得到数字信封，并将其拼接到加密结果后，得到完整的发送加密数据包。</p><p>接收方收到数据包后，首先分割数据获得加密值和数字信封，使用私钥解密数字信封得到会话密钥k；用k输入DES算法解密加密值，得到明文与签名；接收方再用发送方的公钥验证签名，同时比对明文与签名hash是否一致，检查数据的完整性和真实性。</p><h2 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h2><p><img src="https://i.imgloc.com/2023/07/12/VgIopb.png" alt="VgIopb.png"><br>首先，双方建立Socket连接，再交换公钥后进行数据加密通信，具体通信加解密流程如下：<br><a href="https://imgloc.com/i/VgIsvq"><img src="https://i.imgloc.com/2023/07/12/VgIsvq.png" alt="VgIsvq.png"></a></p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><h3 id="RSA密钥生成"><a href="#RSA密钥生成" class="headerlink" title="RSA密钥生成"></a>RSA密钥生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def create_rsa_pair(is_save=False):</span><br><span class="line">    f = RSA.generate(1024)</span><br><span class="line">    private_key = f.exportKey(<span class="string">&quot;PEM&quot;</span>)  <span class="comment"># 生成私钥</span></span><br><span class="line">    public_key = f.publickey().exportKey()  <span class="comment"># 生成公钥</span></span><br><span class="line">    <span class="keyword">if</span> is_save:</span><br><span class="line">        with open(<span class="string">&quot;crypto_private_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) as f:</span><br><span class="line">            f.write(private_key)</span><br><span class="line">        with open(<span class="string">&quot;crypto_public_key.pem&quot;</span>, <span class="string">&quot;wb&quot;</span>) as f:</span><br><span class="line">            f.write(public_key)</span><br><span class="line">    <span class="built_in">return</span> public_key, private_key</span><br></pre></td></tr></table></figure><h3 id="随机生成会话密钥k"><a href="#随机生成会话密钥k" class="headerlink" title="随机生成会话密钥k"></a>随机生成会话密钥k</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def randomkey():</span><br><span class="line">    <span class="built_in">return</span> str(random.randint(10000000,99999999))</span><br></pre></td></tr></table></figure><h3 id="加解密算法"><a href="#加解密算法" class="headerlink" title="加解密算法"></a>加解密算法</h3><p>（1）RSA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------------加密------------------------</span></span><br><span class="line">def encryption(text: str, public_key: bytes):</span><br><span class="line">    <span class="comment"># 字符串指定编码（转为bytes）</span></span><br><span class="line">    text = text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 构建公钥对象</span></span><br><span class="line">    cipher_public = PKCS1_v1_5.new(RSA.importKey(public_key))</span><br><span class="line">    <span class="comment"># 加密（bytes）</span></span><br><span class="line">    text_encrypted = cipher_public.encrypt(text)</span><br><span class="line">    <span class="comment"># base64编码，并转为字符串</span></span><br><span class="line">    text_encrypted_base64 = base64.b64encode(text_encrypted).decode()</span><br><span class="line">    <span class="built_in">return</span> text_encrypted_base64</span><br><span class="line"><span class="comment"># ------------------------解密------------------------</span></span><br><span class="line">def decryption(text_encrypted_base64: str, private_key: bytes):</span><br><span class="line">    <span class="comment"># 字符串指定编码（转为bytes）</span></span><br><span class="line">    text_encrypted_base64 = text_encrypted_base64.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># base64解码</span></span><br><span class="line">    text_encrypted = base64.b64decode(text_encrypted_base64)</span><br><span class="line">    <span class="comment"># 构建私钥对象</span></span><br><span class="line">    cipher_private = PKCS1_v1_5.new(RSA.importKey(private_key))</span><br><span class="line">    <span class="comment"># 解密（bytes）</span></span><br><span class="line">    text_decrypted = cipher_private.decrypt(text_encrypted, Random.new().<span class="built_in">read</span>)</span><br><span class="line">    <span class="comment"># 解码为字符串</span></span><br><span class="line">    text_decrypted = text_decrypted.decode()</span><br><span class="line">    <span class="built_in">return</span> text_decrypted</span><br></pre></td></tr></table></figure><p>（2）DES</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密</span></span><br><span class="line">def des_en(k,text):</span><br><span class="line">    iv = secret_key = k</span><br><span class="line">    k = pyDes.des(secret_key, pyDes.CBC, iv, pad=None, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    data = k.encrypt(text, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    <span class="built_in">return</span> binascii.b2a_hex(data).decode()</span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">def des_de(k,text):</span><br><span class="line">    iv = secret_key =k</span><br><span class="line">    k = pyDes.des(secret_key, pyDes.CBC, iv, pad=None, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    data = k.decrypt(binascii.a2b_hex(text), padmode=pyDes.PAD_PKCS5)</span><br><span class="line"><span class="built_in">return</span> data.decode()</span><br></pre></td></tr></table></figure><h3 id="数字信封"><a href="#数字信封" class="headerlink" title="数字信封"></a>数字信封</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def indataEnvelope(text,key,pk):</span><br><span class="line">    s = des_en(key, text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;DES对M||signature[H(M)]加密后结果:\n&#x27;</span> + hex(int(s, 16)) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    ck = encryption(key, pk)</span><br><span class="line">    linkm = s + <span class="string">&#x27;|&#x27;</span> + ck</span><br><span class="line">    <span class="built_in">return</span> linkm</span><br><span class="line">def outdataEnvelope(linkm,sk):</span><br><span class="line">    l = 0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> linkm:</span><br><span class="line">        l += 1</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    lk = linkm[l:]</span><br><span class="line">    s = linkm[:l - 1]</span><br><span class="line">    k = decryption(lk, sk)</span><br><span class="line">    link_message = des_de(k, s) <span class="comment">#拆信封</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;DES解密得到M||signature[H(M)||lenm]:\n&#x27;</span> + link_message + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    l2 = 0</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(link_message):</span><br><span class="line">        l2 -= 1</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    lenm = int(link_message[l2 + 1:])</span><br><span class="line">    M2 = link_message[:lenm]</span><br><span class="line">    signature_HM = link_message[lenm + 1:l2:]</span><br><span class="line">    <span class="built_in">return</span> M2,signature_HM,k</span><br></pre></td></tr></table></figure><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>（1）签名算法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def to_sign(plain_text, private_key):</span><br><span class="line">    <span class="comment"># 签名</span></span><br><span class="line">    signer_pri_obj = sign_PKCS1_v1_5.new(RSA.importKey(private_key))</span><br><span class="line">    rand_hash = Hash.SHA256.new()</span><br><span class="line">    rand_hash.update(plain_text.encode())</span><br><span class="line">    signature = signer_pri_obj.sign(rand_hash)</span><br><span class="line">    <span class="built_in">return</span> base64.b64encode(signature).decode()</span><br><span class="line">def to_verify(signature, plain_text,public_key):</span><br><span class="line">    <span class="comment">#验签</span></span><br><span class="line">    text_encrypted_base64 = signature.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># base64解码</span></span><br><span class="line">    text_encrypted = base64.b64decode(text_encrypted_base64)</span><br><span class="line">    verifier = sign_PKCS1_v1_5.new(RSA.importKey(public_key))</span><br><span class="line">    _rand_hash = Hash.SHA256.new()</span><br><span class="line">    _rand_hash.update(plain_text.encode())</span><br><span class="line">    verify = verifier.verify(_rand_hash, text_encrypted)</span><br><span class="line">    <span class="built_in">return</span> verify </span><br></pre></td></tr></table></figure><p>（2）签名拼接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def sign_link(sk,M):</span><br><span class="line">    len_m = len(M)</span><br><span class="line">    <span class="comment"># RSA私钥签名</span></span><br><span class="line">    signature_HM = to_sign(M, sk)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;signature[H(M)]:\n&#x27;</span> + signature_HM + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment"># 消息与签名后的结果链接</span></span><br><span class="line">    link_message = M + <span class="string">&#x27;@&#x27;</span> + signature_HM + <span class="string">&#x27;@&#x27;</span> + str(len_m)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;M||signature[H(M)]:\n&#x27;</span> + link_message + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">return</span> link_message</span><br></pre></td></tr></table></figure><h3 id="消息认证"><a href="#消息认证" class="headerlink" title="消息认证"></a>消息认证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HM=to_verify(signature_HM,M2,pk)</span><br><span class="line">    <span class="keyword">if</span>(HM):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哈希值相同,文件安全传输成功!:&quot;</span>+M2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件安全传输失败!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Socket交互完整实现"><a href="#Socket交互完整实现" class="headerlink" title="Socket交互完整实现"></a>Socket交互完整实现</h3><p>（1）Server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">from creatersa import *</span><br><span class="line">from safetools import *</span><br><span class="line">spk,ssk=create_rsa_pair(is_save=False)</span><br><span class="line">IP = <span class="string">&quot;localhost&quot;</span>  <span class="comment"># 服务器端可以写&quot;localhost&quot;，可以为空字符串&quot;&quot;，可以为本机IP地址</span></span><br><span class="line">port = 40005  <span class="comment"># 端口号</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((IP, port))</span><br><span class="line">s.listen(1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;listen at port :&#x27;</span>, port)</span><br><span class="line">conn, addr = s.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;connected by&#x27;</span>, addr)</span><br><span class="line">count=1</span><br><span class="line">cpk=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;send-recv count:&quot;</span>+str(count))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待对方...&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> count==1:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;交换公钥阶段&quot;</span>)</span><br><span class="line">data = conn.recv(1024)</span><br><span class="line">data = data.decode()  <span class="comment"># 解码</span></span><br><span class="line"><span class="keyword">if</span> not data or data == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对方已结束&quot;</span>)</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;received&#x27;</span>, data)</span><br><span class="line">cpk=data</span><br><span class="line">send=spk.decode()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">data = conn.recv(1024)</span><br><span class="line">data = data.decode()  <span class="comment"># 解码</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">if</span> not data or data == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对方已结束&quot;</span>)</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line">M, signature_HM, k = outdataEnvelope(data, ssk)</span><br><span class="line"><span class="comment"># RSA公钥验证</span></span><br><span class="line">HM = to_verify(signature_HM, M, cpk)</span><br><span class="line"><span class="keyword">if</span> (HM):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哈希值相同,消息安全传输成功!:&quot;</span> + M)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;安全传输失败!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> not M or M == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;received message:&#x27;</span>,M)</span><br><span class="line">send = input(<span class="string">&#x27;send:&#x27;</span>)</span><br><span class="line">key = randomkey()</span><br><span class="line">link_message = sign_link(ssk, send)</span><br><span class="line">send = indataEnvelope(link_message, key, cpk)</span><br><span class="line">conn.sendall(send.encode())  <span class="comment"># 再编码发送</span></span><br><span class="line">count+=1</span><br></pre></td></tr></table></figure><p>（2）Client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">from creatersa import *</span><br><span class="line">from safetools import *</span><br><span class="line">cpk,csk=create_rsa_pair(is_save=False)</span><br><span class="line">IP = <span class="string">&#x27;localhost&#x27;</span> <span class="comment">#填写服务器端的IP地址</span></span><br><span class="line">port = 40005 <span class="comment">#端口号必须一致</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">try:</span><br><span class="line">    s.connect((IP,port))</span><br><span class="line">except Exception as e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;server not find or not open&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">count=1</span><br><span class="line">spk=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;send-recv count:&quot;</span> + str(count))</span><br><span class="line"><span class="keyword">if</span> count==1:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;交换公钥阶段&quot;</span>)</span><br><span class="line">trigger=cpk.decode()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">trigger = input(<span class="string">&quot;send:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> trigger.lower() == <span class="string">&#x27;exit&#x27;</span>:  <span class="comment"># 发送结束连接</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已结束&quot;</span>)</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line">key = randomkey()</span><br><span class="line">link_message = sign_link(csk, trigger)</span><br><span class="line">trigger = indataEnvelope(link_message, key, spk)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;等待对方...&quot;</span>)</span><br><span class="line">s.sendall(trigger.encode())</span><br><span class="line">data = s.recv(1024)</span><br><span class="line">data = data.decode()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">if</span> count==1:</span><br><span class="line">spk=data</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">M, signature_HM, k = outdataEnvelope(data, csk)</span><br><span class="line"><span class="comment"># RSA公钥验证</span></span><br><span class="line">HM = to_verify(signature_HM, M, spk)</span><br><span class="line"><span class="keyword">if</span> (HM):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哈希值相同,消息安全传输成功!:&quot;</span> + M)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;安全传输失败!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;received:&#x27;</span>, M)</span><br><span class="line">count += 1</span><br><span class="line">s.close()</span><br><span class="line">conn.close()</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="双方建立连接并交换公钥"><a href="#双方建立连接并交换公钥" class="headerlink" title="双方建立连接并交换公钥"></a>双方建立连接并交换公钥</h3><p><img src="https://i.imgloc.com/2023/07/12/VgILux.png" alt="VgILux.png"><br><a href="https://imgloc.com/i/VgIPHk"><img src="https://i.imgloc.com/2023/07/12/VgIPHk.png" alt="VgIPHk.png"></a></p><h3 id="双方进行消息交互"><a href="#双方进行消息交互" class="headerlink" title="双方进行消息交互"></a>双方进行消息交互</h3><p><img src="https://i.imgloc.com/2023/07/12/VgITEL.png" alt="VgITEL.png"><br><img src="https://i.imgloc.com/2023/07/12/VgIaTp.png" alt="VgIaTp.png"><br><img src="https://i.imgloc.com/2023/07/12/VgIQkU.png" alt="VgIQkU.png"><br><img src="https://i.imgloc.com/2023/07/12/VgIYpv.png" alt="VgIYpv.png"></p><h3 id="结束连接"><a href="#结束连接" class="headerlink" title="结束连接"></a>结束连接</h3><p><img src="https://i.imgloc.com/2023/07/12/VgIq93.png" alt="VgIq93.png"><br><img src="https://i.imgloc.com/2023/07/12/VgNZAy.png" alt="VgNZAy.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次实践根据网安课程中的安全消息传输模型，设计实现两主机间完整的数据传输安全模型。设计一个服务器与客户端之间消息交互的安全传输程序，其中包含加解密、消息认证、数字签名、数字信封等功能。在代码具体编写的过程中，用到了Python中的相关密码学库，加深了对Socket编程、DES加解密和RSA签名验证等算法的熟悉程度，深入理解了安全通信中的数字信封、数字签名和消息认证等功能实现原理。但程序仍存在一些缺陷，如无法相互加密发送文件和图片等其他消息类型；第一阶段公钥交换部分没有加密和认证，无法保证公钥的真实性和完整性等等。后续会加以完善。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据传输 </tag>
            
            <tag> 消息认证 </tag>
            
            <tag> 数字签名 </tag>
            
            <tag> 数字信封 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础——线性表操作</title>
      <link href="/2023/07/12/C-%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/07/12/C-%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="大整数加法"><a href="#大整数加法" class="headerlink" title="大整数加法"></a>大整数加法</h2><p>描述：求两个不超过200位的非负整数的和。<br>输入：有两行，每行是一个不超过200位的非负整数，可能有多余的前导0。<br>输出：一行，即相加后的结果。结果里不能有多余的前导0，即如果结果是342，那么就不能输出为0342。</p><p>思路：定义两个字符数组分别通过get函数接收输入的两组数据（字符串形式），计算出长度。再使用for循环将两组字符串转换为int型数组，同时将顺序颠倒。再将转换后的两组int型数组相加，同时判断每位相加是否大于9，若大于，则进位。<br>输出时从后往前输出，需找到最后一个不等于零的数，防止输出前缀带0。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    char a[201],b[201];</span><br><span class="line">    int c[300]=&#123;0&#125;,d[300]=&#123;0&#125;;</span><br><span class="line">    int i,j=0,la,lb,k,t;</span><br><span class="line">    gets(a);</span><br><span class="line">    gets(b);</span><br><span class="line">    la=(int)strlen(a);</span><br><span class="line">    lb=(int)strlen(b);</span><br><span class="line">    <span class="keyword">for</span>(i=la-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        c[j++]=a[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j=0,i=lb-1;i&gt;=0;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        d[j++]=b[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(la&gt;lb)</span><br><span class="line">    &#123;</span><br><span class="line">        k=la;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k=lb;</span><br><span class="line">    <span class="keyword">for</span>(i=0;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]+=d[i];</span><br><span class="line">        <span class="keyword">if</span>(c[i]&gt;9)</span><br><span class="line">        &#123;</span><br><span class="line">            t=c[i];</span><br><span class="line">            c[i+1]+=t/10;</span><br><span class="line">            c[i]=t%10;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=k;i&gt;=0&amp;&amp;c[i]==0;i--)&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=0)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;i&gt;=0;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://i.imgloc.com/2023/07/12/Vg80gC.png" alt="Vg80gC.png"></p><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p>描述：有n只猴子，按顺时针方向围成一圈选大王（编号从1到n），从第1号开始报数，一直数到m，数到m的猴子退出圈外，剩下的猴子再接着从1开始报数。就这样，直到圈内只剩下一只猴子时，这个猴子就是猴王，编程求输入n，m后，输出最后猴王的编号。<br>输入：输入包含两个整数，第一个是n，第二个是m (0 &lt; m,n &lt;&#x3D;300)。<br>输出：输出包含一行，即最后猴王的编号</p><p>思路：设定M数组，按12345顺序记录猴子序号。<br>i代表剩下猴子序号列表的最后一位。通过for循环计数，每次计数结束，i需要减1。K循环中，t记录第一个位置的猴子序号，循环m次，不断将猴子序号数组向前赋值一位（类似于圈），当数到m时，M[i]恰好是此次报数需要去掉的猴子的序号，i–（下次不必访问改数组元素）。<br>循环结束时，剩下唯一一个猴子的序号存储于M[0].<br>每次i–，代表去掉了一个猴子，也代表遍历数组少最后一个元素。<br>下次遍历刚好从上次去掉的猴子的下一个猴子序号开始。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="comment">#define MAX 300</span></span><br><span class="line">int n,m;</span><br><span class="line">int M[MAX];</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    int i , j , k, t;</span><br><span class="line">    scanf(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = 0 ; i &lt; n ; i++)</span><br><span class="line">        M[i]=i+1;</span><br><span class="line">    <span class="keyword">for</span>(i = n-1 ; i &gt;= 0 ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k = 1 ; k &lt;= m ; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            t=M[0];</span><br><span class="line">            <span class="keyword">for</span>(j = 0 ; j &lt; i ; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                M[j]=M[j+1];</span><br><span class="line">            &#125;</span><br><span class="line">            M[i]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,M[0]);   </span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://i.imgloc.com/2023/07/12/Vg8jjA.png" alt="Vg8jjA.png"></p><h2 id="集合合并"><a href="#集合合并" class="headerlink" title="集合合并"></a>集合合并</h2><p>描述：已知集合A与集合B，且第个集合内数据是唯一的。求A，B集合合并成新的集合C，要求C集合内的数据也是唯一的。并指出C集合的个数。<br>输入：三行，第一行分别为集合A，B的个数;第二行为A集合的数据；第三行为B集合的数据.<br>输出：两行：第一行集合C的个数;第二行为C集合的数据.</p><p>思路：使用链表类型的数据结构合并集合。<br>循环两个集合链表，l3是合并结果链表。从第一个结点开始比较，将数据小的结点插入l3结点的最后一位，同时数据小的结点链表指针移到下一结点。若相等则l3尾部接P1指针目前所指向的结点，并将p1p2指向结点的指针都移到下一个结点。直到p1p2其中一个遍历结束或同时结束。<br>若未同时结束，将未遍历结束的集合链表剩下的部分接到l3结点后。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;malloc.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;ctype.h&gt;</span></span><br><span class="line">struct Lnode&#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Lnode *next;</span><br><span class="line">&#125;*<span class="built_in">head</span>;</span><br><span class="line">typedef struct Lnode *Link;</span><br><span class="line"></span><br><span class="line">void Initlink(Link &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    L=(Link)malloc(sizeof(struct Lnode));</span><br><span class="line">    L-&gt;next=NULL;</span><br><span class="line">&#125;</span><br><span class="line">void inlink(Link &amp;L,int n)</span><br><span class="line">&#123;</span><br><span class="line">    Link p,t;</span><br><span class="line">    t=L;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        p=(Link)malloc(sizeof(struct Lnode));</span><br><span class="line">        t-&gt;next=p;</span><br><span class="line">        p-&gt;next=NULL;</span><br><span class="line">        scanf(<span class="string">&quot;%d&quot;</span>,&amp;p-&gt;data);</span><br><span class="line">        t=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void printlink(Link &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    Link p;</span><br><span class="line">    p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">int insertlink(Link &amp;l1,Link &amp;l2,Link &amp;l3)</span><br><span class="line">&#123;</span><br><span class="line">    Link p1,p2,p3;</span><br><span class="line">    int c=0;</span><br><span class="line">    p1=l1-&gt;next;</span><br><span class="line">    p2=l2-&gt;next;</span><br><span class="line">    p3=l3;</span><br><span class="line">    <span class="keyword">while</span>(p1&amp;&amp;p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p1-&gt;data&lt;p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;next=p1;</span><br><span class="line">            p3=p1;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;data&gt;p2-&gt;data)&#123;</span><br><span class="line">            p3-&gt;next=p2;</span><br><span class="line">            p3=p2;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p1-&gt;data==p2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            p3-&gt;next=p1;</span><br><span class="line">            p3=p1;</span><br><span class="line">            p1=p1-&gt;next;</span><br><span class="line">            p2=p2-&gt;next;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p1)</span><br><span class="line">    &#123;</span><br><span class="line">        p3-&gt;next=p1;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">        p3=p3-&gt;next;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2)</span><br><span class="line">    &#123;</span><br><span class="line">        p3-&gt;next=p2;</span><br><span class="line">        p2=p2-&gt;next;</span><br><span class="line">        p3=p3-&gt;next;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line">    p3-&gt;next=NULL;</span><br><span class="line">    <span class="built_in">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    Link L1,L2,L3;</span><br><span class="line">    int n,m,ans;</span><br><span class="line">    scanf(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    Initlink(L1);</span><br><span class="line">    Initlink(L2);</span><br><span class="line">    Initlink(L3);</span><br><span class="line">    inlink(L1,n);</span><br><span class="line">    inlink(L2,m);</span><br><span class="line">    ans=insertlink(L1,L2,L3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    printlink(L3);</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="https://i.imgloc.com/2023/07/12/Vg8IQN.png" alt="Vg8IQN.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++基础 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级神经网络MobileNetV1-V3综述</title>
      <link href="/2023/07/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CMobileNetV1-V3%E7%BB%BC%E8%BF%B0/"/>
      <url>/2023/07/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CMobileNetV1-V3%E7%BB%BC%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>随着深度学习的发展，卷积神经网络变得越来越普遍。当前发展的总体趋势是，通过更深和更复杂的网络来得到更高的精度，但是这种网络往往在模型大小和运行速度上没多大优势。一些嵌入式平台上的应用比如机器人和自动驾驶，它们的硬件资源有限，就十分需要一种轻量级、低延迟（同时精度尚可接受）的网络模型。即使我们考虑云计算，也需要消耗大量的带宽资源和计算资源。因此，从2016年直至现在，业内提出了SqueezeNet、ShuffleNet、NasNet、MnasNet以及MobileNet等轻量级网络模型。这些模型使移动终端、嵌入式设备运行神经网络模型成为可能。而MobileNet在轻量级神经网络中较具代表性。<br>轻量级网络研究目前有两个发展方向，一个是迁移学习，另一个是网络稀疏。迁移学习是指一种学习对另一种学习的影响，以减少模型对数据量的依赖。不过，它也可以通过知识蒸馏实现大模型到小模型的迁移。而另一方面，网络稀疏是现在比较主流的优化方向，这方面的工作主要是以网络结构的剪枝和调整卷积方式为主。比如深度压缩，但它在效率上的提高并不适合大多数的通用CPU，因为它的存储不连续，索引权重时容易发生Cache Miss。本文介绍的MobileNet在这方面更有优势。<br>MobileNet主要关注优化延迟，同时兼顾模型大小，在保证模型准确率的同时体积更小，速度更快。谷歌对于MobileNet的每次更新都让其有了新的特性，使得MobileNet非常具有研究和分析意义，本文将对MobileNetV1-V3的主要创新点和网络结构进行解析，并在最后使用Pytorch简单复现MobileNetV1。</p><h2 id="MobileNetV1网络架构"><a href="#MobileNetV1网络架构" class="headerlink" title="MobileNetV1网络架构"></a>MobileNetV1网络架构</h2><p>作为MobileNet系列最初始的版本，V1以深度可分离卷积代替标准卷积层作为主体构建网络结构，引入两个全局超参数（宽度、分辨率因子）实现准确率与延时性平衡。</p><h3 id="深度可分离卷积"><a href="#深度可分离卷积" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积</h3><p>深度可分离卷积（DW）是一种分解卷积的形式，它将标准卷积分解为深度卷积和逐点卷积（1×1卷积）。<br>对于MobileNet，深度卷积对每个输入通道对应一个输入通道，然后逐点卷积用1×1卷积将深度卷积的输出结合起来。而标准卷积的卷积核是用在所有的输入通道上。深度可分卷积将其分为两层，一个单独的层用于滤波，另一个单独的层用于合并，这样其实整体效果和一个标准卷积是差不多的。这种因式分解的效果是大幅减少计算量和模型大小。</p><p><a href="https://imgse.com/i/pCWce2V"><img src="https://s1.ax1x.com/2023/07/11/pCWce2V.png" alt="pCWce2V.png"></a></p><center>图1 分解过程示意图</center><p>输入的通道数为M ,输出的通道数为N，DK为卷积核宽度和高度，DF为特征映射的宽度和高度，可以得到标准卷积K为（DK，DK，M，N），输入特征映射F尺寸为（DF，DF，M），输出特征映射G为（DG，DG，N）。<br>把深度可分离卷积与标准卷积所用的计算量做对比。标准卷积的计算公式为：<br><a href="https://imgse.com/i/pCWcuKU"><img src="https://s1.ax1x.com/2023/07/11/pCWcuKU.png" alt="pCWcuKU.png"></a><br>将标准卷积因式分解为深度卷积和逐点卷积后，深度卷积的尺寸为（DK，DK，1，M），点卷积为（1，1，M，N）。根据卷积公式得到深度可分离卷积的计算量（深度卷积+逐点卷积）为：<br><a href="https://imgse.com/i/pCWcarD"><img src="https://s1.ax1x.com/2023/07/11/pCWcarD.png" alt="pCWcarD.png"></a></p><p>根据两个计算量公式可以得到总计算量减少了以下这么多：<br><a href="https://imgse.com/i/pCWcDIA"><img src="https://s1.ax1x.com/2023/07/11/pCWcDIA.png" alt="pCWcDIA.png"></a></p><h3 id="MobileNetV1网络结构"><a href="#MobileNetV1网络结构" class="headerlink" title="MobileNetV1网络结构"></a>MobileNetV1网络结构</h3><p>1.1介绍的深度可分离卷积（DW）作为MobileNet的基本组件，但是在真正应用中会加入Batch Normalization（BN）和ReLU激活函数，DW基本结构如下图所示：<br><a href="https://imgse.com/i/pCWcoin"><img src="https://s1.ax1x.com/2023/07/11/pCWcoin.png" alt="pCWcoin.png"></a></p><center>图2 DW基本结构图</center><p>如图3所示，MobileNet的具体结构首先是一个3x3的标准卷积，然后后面就是堆积DW，并且可以看到其中的部分DW会通过strides&#x3D;2进行下采样。然后采用average pooling将特征变成1x1，根据预测类别大小加上全连接层，最后是一个softmax层。整体来看，网络有28层（这里avgpool和softmax不计算在内）。<br><a href="https://imgse.com/i/pCWgSiR"><img src="https://s1.ax1x.com/2023/07/11/pCWgSiR.png" alt="pCWgSiR.png"></a></p><center>图3 MobileNet网络结构</center><p>通过该论文可以分析整个网络的参数和计算量分布，如图4所示。可以看到模型几乎将所有计算量集中在1x1卷积上。卷积一般通过一种im2col方式实现，其需要内存重组，但是当卷积核为1x1时，其实就不需要这种操作，底层可以通过GEMM有更快的实现。参数也主要集中在逐点卷积。</p><p><a href="https://cdnjson.com/image/RN9wi"><img src="https://cdnjson.com/images/2023/07/11/7.png" alt="7.png"></a></p><center>图4每层所占资源</center><h3 id="宽度和分辨率因子"><a href="#宽度和分辨率因子" class="headerlink" title="宽度和分辨率因子"></a>宽度和分辨率因子</h3><p>MobileNetV1本身的网络结构已经比较小并且执行延迟较低，但为了适配更定制化的场景，MobileNet提供了称为宽度因子和分辨率因子的超参数给我们调整。在MobileNetV1、V2、V3都可以运用。<br>宽度因子主要是按比例减少通道数，该参数记为α，其取值范围为(0,1]，那么输入与输出通道数将变成αM 和αN。分辨率因子主要是按比例降低特征图的大小，记为β，比如原来输入特征图是224x224，可以减少为192x192，综合两个因子，DW的计算量为：</p><p><a href="https://cdnjson.com/image/RNLQj"><img src="https://cdnjson.com/images/2023/07/11/8.png" alt="8.png"></a></p><h2 id="MobileNetV2网络架构"><a href="#MobileNetV2网络架构" class="headerlink" title="MobileNetV2网络架构"></a>MobileNetV2网络架构</h2><p>V1的核心是加入深度可分离卷积和两个超参数降低计算量来提升网络的运算速度，但在训练结束后的深度卷积得到较多的空卷积核，主要是由于ReLU激活函数对低维度运算，很容易造成信息的丢失。而在高维度进行ReLU运算的话，信息的丢失则会很少。针对这个问题，在MobileNetV2中将ReLU替换成线性激活函数。相较于V1，MobileNetV2中设计了线性瓶颈和反向残差结构，进一步优化网络。</p><p><a href="https://cdnjson.com/image/RNhgy"><img src="https://cdnjson.com/images/2023/07/11/1.png" alt="1.png"></a></p><center>图5 MobileNetV2网络结构</center><h3 id="线性瓶颈结构"><a href="#线性瓶颈结构" class="headerlink" title="线性瓶颈结构"></a>线性瓶颈结构</h3><p>线性瓶颈英文为Linear Bottleneck，是从Bottleneck结构演变而来的，被用于MobileNetV2与V3。该结构第一层使用逐点卷积，第二层使用3×3大小卷积核进行深度卷积，第三层再使用逐点卷积。MobileNet中的瓶颈结构最后一层逐点卷积使用的激活函数是Linear，所以称其为线性瓶颈结构。线性瓶颈结构有两种，第一种是步长为1时使用残差结构，第二种是步长为2时不使用残差结构。</p><p><a href="https://cdnjson.com/image/RNmXM"><img src="https://cdnjson.com/images/2023/07/11/2.png" alt="2.png"></a></p><center>图6 V1V2网络结构对比图</center><p>深度卷积本身没有改变通道的能力，来的是多少通道输出就是多少通道。如果来的通道很少的话，DW深度卷积只能在低维度上工作，这样效果并不会很好，所以我们要“扩张”通道。既然我们已经知道PW（1×1卷积）可以用来升维和降维，那就可以在DW深度卷积之前使用PW卷积进行升维（升维倍数为t，t&#x3D;6），再在一个更高维的空间中进行卷积操作来提取特征。不管输入通道数是多少，经过第一个PW逐点卷积升维之后，深度卷积都是在相对的更高6倍维度上进行工作。</p><h3 id="反向残差"><a href="#反向残差" class="headerlink" title="反向残差"></a>反向残差</h3><p>受ResNet的残差结构启发，MobileNetV2中也加入了类似的shortcut结构，但在ResNet中的流程是降维、卷积、升维，而MobileNetV2使用第一层逐点卷积升维并使用Relu6激活函数代替Relu，之后使用深度卷积，同样使用Relu6激活函数，再使用逐点卷积降维。这样的卷积操作方式更有利于移动端使用，因维度升降方式与ResNet刚好相反，MobileNetV2将其称之为反向残差。</p><h2 id="MobileNetV3网络架构"><a href="#MobileNetV3网络架构" class="headerlink" title="MobileNetV3网络架构"></a>MobileNetV3网络架构</h2><p>MobileNetV3进一步提高模型精度降低延迟，并为不同性能的运行平台细化划分不同的网络结构。提出了Large和Small两个版本，Large版本适用于计算和存储性能较高的平台，Small版本适用于硬件性能较低的平台。在MobileNetV3创新性地用5×5大小的深度卷积代替部分3×3的深度卷积，同时加入Squeeze-and-excitation（SE）模块和 h-swish（HS）激活函数以提高模型精度。</p><p><a href="https://cdnjson.com/image/RNCUQ"><img src="https://cdnjson.com/images/2023/07/11/3.png" alt="3.png"></a></p><center>图7 左为small版本右为large版本网络结构</center><h3 id="SE模块"><a href="#SE模块" class="headerlink" title="SE模块"></a>SE模块</h3><p>SE模块是一种能够让网络模型对特征进行校准的机制，使得有效的权重大，无效或效果小的权重小的效果，达到通过精确建模卷积特征各个通道之间的作用关系来改善网络模型表达能力的目的。MobileNetV3在线性瓶颈结构最后一层上，将V2中最后的逐点卷积，改为先进行SE操作再逐点卷积。这样的改进会增加网络的总参数量和计算量，所以MobileNetV3-Large中的总参数量比MobileNetV2多了2M。但相较于V2，V3的精度有了很大的提升。</p><h3 id="h-swish（HS）激活函数"><a href="#h-swish（HS）激活函数" class="headerlink" title="h-swish（HS）激活函数"></a>h-swish（HS）激活函数</h3><p>V3尝试swish当作为ReLU的替代，因为它可以显著提高神经网络的精度。虽然这种非线性提高了精度，但它在嵌入式环境中带来了非零成本，因为在移动设备上计算sigmoid函数要昂贵得多。所以以swish为基础修改提出了h-swish。<br>MobieNetV3一个近似函数来逼进这个swish，细微的区别是使用的是ReLU6而不是自定义剪辑常数。因为几乎所有的软件和硬件框架上都可以使用ReLU6的优化实现，同时在量化模式下，它消除了由于近似sigmoid的不同实现而导致的潜在的数值精度损失，h-swish可以实现为一个分段函数，以减少内存访问数量，从而大幅降低延迟成本。</p><p><a href="https://cdnjson.com/image/RNF1D"><img src="https://cdnjson.com/images/2023/07/11/4.png" alt="4.png"></a></p><center>图8 h-swish公式</center><p>随着网络的深入，应用非线性激活函数的成本会降低，能够更好的减少参数量。因此，在V3的架构中，只在模型的后半部分使用h-swish。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MobileNet作为轻量级神经网络相较于其他类模型有着更小的参数量和计算量，但在移动计算领域有着较快的运算速度和低延迟，同时具有较高的准确率。<br>纵观MobileNet从V1到V3的进化，是在保证模型准确率的基础上，尽可能的减少神经网络参数、减少计算量，并在此之上尽可能提升准确率。MobileNet使用了批规范化，参考并优化了Xception结构中的深度可分离卷积、ResNet中的瓶颈结构和残差结构、MNasNet中的Squeeze-and-excitation结构，使用了全新的h-swish激活函数等，从而进化出了现在良好的效果。这个优化过程对于我们研发设计适用于移动设备的轻量级网络模型有着一定的启发性。</p><h2 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h2><p>环境：处理器2.2 GHz 六核Intel Core i7内存16 GB 2400 MHz DDR4</p><p>在cifar-10数据集上训练3个小时，保存得到accuracy为73.16%的模型。<br>代码仓库：<a href="https://github.com/printwyy/DLhomework">https://github.com/printwyy/DLhomework</a></p><p><a href="https://cdnjson.com/image/RNbrY"><img src="https://cdnjson.com/images/2023/07/11/5.png" alt="5.png"></a></p><p><a href="https://cdnjson.com/image/RNDOF"><img src="https://cdnjson.com/images/2023/07/11/11.png" alt="11.png"></a></p><center>图10 训练-结束</center><p><a href="https://cdnjson.com/image/RNnd6"><img src="https://cdnjson.com/images/2023/07/11/12.png" alt="12.png"></a></p><center>图11 识别结果</center><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Howard A G, Zhu M, Chen B, et al. Mobilenets: Efficient convolutional neural networks for mobile vision applications. arXiv:1704.04861, 2017.</p><p>[2] Sandler M, Howard A, Zhu M, et al. MobileNetV2: Inverted Residuals and Linear Bottlenecks[C]&#x2F;&#x2F; 2018 IEEE&#x2F;CVF Conference on Computer Vision and Pattern Recognition (CVPR). IEEE, 2018.</p><p>[3] Howard A, Sandler M, Chen B, et al. Searching for MobileNetV3[C]&#x2F;&#x2F; 2019 IEEE&#x2F;CVF International Conference on Computer Vision (ICCV). IEEE, 2020.</p>]]></content>
      
      
      <categories>
          
          <category> 学术相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> MobileNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络编程综合程序设计</title>
      <link href="/2023/07/11/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2023/07/11/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="利用缓冲区对文件读写求和"><a href="#利用缓冲区对文件读写求和" class="headerlink" title="利用缓冲区对文件读写求和"></a>利用缓冲区对文件读写求和</h2><p>描述：新建三个文件，分别命名为“test1.txt”、“test2.txt”和“test3.txt”。其中“test1.txt”文件中的内容为“123456789”，“test2.txt”文件中的内容为“987654321”。要求每次分别从“test1.txt”和“test2.txt” 文件中读取一个十进制数码出来，求和后把结果存入“test3.txt”，最终“test3.txt”共记录了10次求和的结果。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int fd1=-1,fd2=-1,fdans=-1;</span><br><span class="line">char file1[]=<span class="string">&quot;//home//sdn//wyy//test1.txt&quot;</span>;</span><br><span class="line">char file2[]=<span class="string">&quot;//home//sdn//wyy//test2.txt&quot;</span>;</span><br><span class="line">char file3[]=<span class="string">&quot;//home//sdn//wyy//test3.txt&quot;</span>;</span><br><span class="line">char buf1[2];</span><br><span class="line">ssize_t size1=-1,size2,size3;</span><br><span class="line"> char buf2[2],s[10];</span><br><span class="line">int t1,t2,ans,count=0;</span><br><span class="line">fd1=open(file1,O_RDONLY);</span><br><span class="line">fd2=open(file2,O_RDONLY);</span><br><span class="line">fdans=open(file3,O_RDWR);</span><br><span class="line"><span class="keyword">if</span>(fd1==-1||fd2==-1||fdans==-1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(count&lt;9)</span><br><span class="line">&#123;</span><br><span class="line">size1=<span class="built_in">read</span>(fd1,buf1,1);</span><br><span class="line">size2=<span class="built_in">read</span>(fd2,buf2,1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;read : %c     %c\n&quot;</span>,buf1[0],buf2[0]);</span><br><span class="line">t1=buf1[0]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">t2=buf2[0]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;read : %d     %d\n&quot;</span>,t1,t2);</span><br><span class="line">ans=t1+t2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ans : %d\n&quot;</span>,ans);</span><br><span class="line">//itoa(ans,s,10);</span><br><span class="line">sprintf(s,<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write ans: %s\n&quot;</span>,s);</span><br><span class="line">size3=write(fdans,s,strlen(s));</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><a href="https://imgse.com/i/pCWsqMD"><img src="https://s1.ax1x.com/2023/07/11/pCWsqMD.png" alt="pCWsqMD.png"></a></p><h2 id="进程间通信累加计算"><a href="#进程间通信累加计算" class="headerlink" title="进程间通信累加计算"></a>进程间通信累加计算</h2><p>描述：在一个进程中创建两个新进程（进程A和进程B），要求：（1）在进程A和进程B中分别输出pid和ppid；（2）进程B中实现从1到100的累加计算并输出计算结果。</p><p>代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/wait.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">pid_t a,b;</span><br><span class="line">int ans=0;</span><br><span class="line">a=fork();</span><br><span class="line"><span class="keyword">if</span>(a==-1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A error\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&gt;0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A pid:%d\n&quot;</span>,a);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==0)&#123;</span><br><span class="line">b=fork();</span><br><span class="line"><span class="keyword">if</span>(b==-1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B error\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b&gt;0)&#123;</span><br><span class="line">int i=1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B pid:%d\n&quot;</span>,b);</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=100;i++)&#123;</span><br><span class="line">ans+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ans :%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">waitpid(a,NULL,0);</span><br><span class="line">waitpid(b,NULL,0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><a href="https://imgse.com/i/pCWyVds"><img src="https://s1.ax1x.com/2023/07/11/pCWyVds.png" alt="pCWyVds.png"></a></p><h2 id="UDP套接字通信"><a href="#UDP套接字通信" class="headerlink" title="UDP套接字通信"></a>UDP套接字通信</h2><p>描述：使用UDP套接字实现服务器和客户端进程之间通信，要求：若客户端发送一个字符串给服务器端，则服务器端会将该字符串中的第一个字符返回给客户端，客户端打印返回的结果。</p><p>服务器代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define port 8848</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int sock,b,re,clen,se;</span><br><span class="line">struct sockaddr_in saddr,caddr;</span><br><span class="line">char buf[100];</span><br><span class="line">sock=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sock&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sock error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saddr.sin_family=AF_INET;</span><br><span class="line">saddr.sin_port=htons(port);</span><br><span class="line">saddr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">b=<span class="built_in">bind</span>(sock,(struct sockaddr*)&amp;saddr,sizeof(saddr));</span><br><span class="line"><span class="keyword">if</span>(b&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;&#125;</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line">clen=sizeof(caddr);</span><br><span class="line">re=recvfrom(sock,buf,sizeof(buf),0,(struct sockaddr*)&amp;caddr,&amp;clen);</span><br><span class="line"><span class="keyword">if</span>(re&lt;0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv error\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first char: %c\n&quot;</span>,buf[0]);</span><br><span class="line">se=sendto(sock,&amp;buf[0],sizeof(buf[0]),0,(struct sockaddr*)&amp;caddr,clen);</span><br><span class="line"><span class="keyword">if</span>(se&lt;0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define port 8848</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int sock,b,re,clen,se;</span><br><span class="line">struct sockaddr_in saddr,caddr;</span><br><span class="line">char buf;</span><br><span class="line">char s[50];</span><br><span class="line">sock=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sock&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sock error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">saddr.sin_family=AF_INET;</span><br><span class="line">saddr.sin_port=htons(port);</span><br><span class="line">saddr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line">clen=sizeof(caddr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">scanf(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">se=sendto(sock,s,sizeof(s),0,(struct sockaddr*)&amp;saddr,sizeof(saddr));</span><br><span class="line"><span class="keyword">if</span>(se&lt;0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send error\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first char: %c\n&quot;</span>,s[0]);</span><br><span class="line">se=recvfrom(sock,&amp;buf,sizeof(buf),0,(struct sockaddr*)&amp;caddr,&amp;clen);</span><br><span class="line"><span class="keyword">if</span>(se&lt;0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send error\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;first recv char: %c\n&quot;</span>,buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pCWyZon"><img src="https://s1.ax1x.com/2023/07/11/pCWyZon.png" alt="pCWyZon.png"></a></p><h2 id="TCP套接字通信"><a href="#TCP套接字通信" class="headerlink" title="TCP套接字通信"></a>TCP套接字通信</h2><p>描述：请在本地电脑上使用TCP套接字编程实现所要求的功能。要求实现：（1）建立一个TCP服务器端和两个TCP客户端，其中两个TCP客户端进程分别用clientA和clientB标识；（2）当clientA发送一个整数n（其中n&gt;2）给服务器端后，服务器会计算1+2+…+n的结果，并把该结果返回给客户端clientB。</p><p>服务器代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;// 包含套接字函数库</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;// 包含AF_INET相关结构</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;// 包含AF_INET相关操作的函数</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 5210</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">   int count;</span><br><span class="line">   int sendsum;</span><br><span class="line">   int buf,sendbuf=0;</span><br><span class="line">   int s_fd, c_fd,c_fd2;// 服务器和客户套接字标识符</span><br><span class="line">   int s_len, c_len,c_len2;// 服务器和客户消息长度</span><br><span class="line">   struct sockaddr_in s_addr;// 服务器套接字地址</span><br><span class="line">   struct sockaddr_in c_addr,c_addr2;// 客户套接字地址</span><br><span class="line">   s_fd = socket(AF_INET, SOCK_STREAM, 0);// 创建套接字</span><br><span class="line">   <span class="keyword">if</span>(s_fd&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   bzero(&amp;s_addr,sizeof(s_addr));</span><br><span class="line">   s_addr.sin_family = AF_INET;// 定义服务器套接字地址中的域</span><br><span class="line">   s_addr.sin_addr.s_addr=htonl(INADDR_ANY);// 定义套接字地址</span><br><span class="line">   s_addr.sin_port=htons(PORT);// 定义服务器套接字端口</span><br><span class="line">   s_len = sizeof(s_addr);   // 定义s_len的长度</span><br><span class="line">   int fd= <span class="built_in">bind</span>(s_fd,(struct sockaddr*)&amp;s_addr,s_len);// 绑定套接字与设置的端口号</span><br><span class="line">   <span class="keyword">if</span>(fd&lt;0)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;bind error %d\n&quot;</span>,fd);</span><br><span class="line">   close(s_fd);</span><br><span class="line">   <span class="built_in">return</span> 0;</span><br><span class="line">   &#125;</span><br><span class="line">   listen(s_fd,10);// 监听状态，守候进程</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;please wait a moment!\n&quot;</span>);</span><br><span class="line">   c_len = sizeof(c_addr);</span><br><span class="line">   c_len2=sizeof(c_addr2);</span><br><span class="line">   c_fd = accept(s_fd,(struct sockaddr*)&amp;c_addr,(socklen_t *__restrict)&amp;c_len); //接收客户端连接请求</span><br><span class="line"><span class="keyword">if</span>(c_fd&gt;=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect c1\n&quot;</span>);</span><br><span class="line">  c_fd2=accept(s_fd,(struct sockaddr*)&amp;c_addr2,(socklen_t *__restrict)&amp;c_len2);</span><br><span class="line"><span class="keyword">if</span>(c_fd2&gt;=0)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect c2\n&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   recv(c_fd,&amp;buf,sizeof(buf),0);   //接收消息</span><br><span class="line">   </span><br><span class="line">   sendsum=0;</span><br><span class="line">   <span class="keyword">for</span>(count=0;count&lt;=buf;count++)</span><br><span class="line">   &#123;</span><br><span class="line">       sendsum+=count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;sum= %d\n&quot;</span>,sendsum);//输出到终端</span><br><span class="line">   send(c_fd2,&amp;sendsum,sizeof(sendsum),0);   //回复消息</span><br><span class="line">   close(c_fd);</span><br><span class="line">   close(c_fd2);// 关闭socket连接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端A代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;// 包含套接字函数库</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;// 包含AF_INET相关结构</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;// 包含AF_INET相关操作的函数</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 5210</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">int count;</span><br><span class="line">   int sockfd;// 客户套接字标识符</span><br><span class="line">   int len;// 客户消息长度</span><br><span class="line">   struct sockaddr_in addr;// 客户套接字地</span><br><span class="line">   int newsockfd;</span><br><span class="line">   int buf;//要发送的消息</span><br><span class="line">   int len2;</span><br><span class="line">   int resum;  </span><br><span class="line">   sockfd = socket(AF_INET,SOCK_STREAM,0);// 创建套接字</span><br><span class="line">   addr.sin_family = AF_INET;// 客户端套接字地址中的域</span><br><span class="line">   addr.sin_addr.s_addr=htonl(INADDR_ANY);   </span><br><span class="line">   addr.sin_port =htons(PORT);// 客户端套接字端口</span><br><span class="line">   len = sizeof(addr);</span><br><span class="line">   newsockfd =connect(sockfd,(struct sockaddr*)&amp;addr,len);//发送连接服务器的请求</span><br><span class="line">   <span class="keyword">if</span> (newsockfd == -1) &#123;</span><br><span class="line">      perror(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">      <span class="built_in">return</span> 1;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">   scanf(<span class="string">&quot;%d&quot;</span>,&amp;buf);</span><br><span class="line">   send(sockfd,&amp;buf,sizeof(buf),0); //发送消息</span><br><span class="line">   close(sockfd);// 关闭连接</span><br><span class="line">   <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端B代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;// 包含套接字函数库</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;// 包含AF_INET相关结构</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;// 包含AF_INET相关操作的函数</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 5210</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">int count;</span><br><span class="line">   int sockfd;// 客户套接字标识符</span><br><span class="line">   int len;// 客户消息长度</span><br><span class="line">   struct sockaddr_in addr;// 客户套接字地址</span><br><span class="line">   int newsockfd;</span><br><span class="line">   int len2;</span><br><span class="line">   int resum;  </span><br><span class="line">   sockfd = socket(AF_INET,SOCK_STREAM,0);// 创建套接字</span><br><span class="line">   addr.sin_family = AF_INET;// 客户端套接字地址中的域</span><br><span class="line">   addr.sin_addr.s_addr=htonl(INADDR_ANY);   </span><br><span class="line">   addr.sin_port =htons(PORT);// 客户端套接字端口</span><br><span class="line">   len = sizeof(addr);</span><br><span class="line">   newsockfd =connect(sockfd,(struct sockaddr*)&amp;addr,len);//发送连接服务器的请求</span><br><span class="line">   <span class="keyword">if</span> (newsockfd == -1) &#123;</span><br><span class="line">      perror(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">      <span class="built_in">return</span> 1;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;connect c2\n&quot;</span>);</span><br><span class="line">   resum=0;</span><br><span class="line">   recv(sockfd,&amp;resum,sizeof(resum),0);//接收新消息</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;receive message:sum is %d\n&quot;</span>,resum);//输出到终端</span><br><span class="line">   close(sockfd);// 关闭连接</span><br><span class="line">   <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><a href="https://imgse.com/i/pCWy4Og"><img src="https://s1.ax1x.com/2023/07/11/pCWy4Og.png" alt="pCWy4Og.png"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、经过最后一次综合项目设计，对之前所学linux知识点进行了系统的复习，多线程多进程、文件读写、socket TCP、UDP，对相关函数的运用和参数有了更深的理解。<br>2、熟悉理解UDP和TCP的流程和之间的区别。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
            <tag> 文件读写 </tag>
            
            <tag> 进程 </tag>
            
            <tag> socket </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP、UDP套接字编程</title>
      <link href="/2023/07/11/TCP%E3%80%81UDP%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/07/11/TCP%E3%80%81UDP%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP套接字编程"><a href="#TCP套接字编程" class="headerlink" title="TCP套接字编程"></a>TCP套接字编程</h2><p>描述：在Linux系统下，通过TCP协议的套接字编程，在服务器端的计算机上实现累加求和的计算。需要求和的数据全部从客户端传送给服务器端，然后将服务器端计算的和输出到终端，并传送回客户端。</p><p>服务器端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;// 包含套接字函数库</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;// 包含AF_INET相关结构</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;// 包含AF_INET相关操作的函数</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 5210</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">   int count;</span><br><span class="line">   int sendsum;</span><br><span class="line">   int buf[10];</span><br><span class="line">   int s_fd, c_fd;// 服务器和客户套接字标识符</span><br><span class="line">   int s_len, c_len;// 服务器和客户消息长度</span><br><span class="line">   struct sockaddr_in s_addr;// 服务器套接字地址</span><br><span class="line">   struct sockaddr_in c_addr;// 客户套接字地址</span><br><span class="line">   s_fd = socket(AF_INET, SOCK_STREAM, 0);// 创建套接字</span><br><span class="line">   <span class="keyword">if</span>(s_fd&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   bzero(&amp;s_addr,sizeof(s_addr));</span><br><span class="line">   s_addr.sin_family = AF_INET;// 定义服务器套接字地址中的域</span><br><span class="line">   s_addr.sin_addr.s_addr=htonl(INADDR_ANY);// 定义套接字地址</span><br><span class="line">   s_addr.sin_port=htons(PORT);// 定义服务器套接字端口</span><br><span class="line">   s_len = sizeof(s_addr);   // 定义s_len的长度</span><br><span class="line">   int fd= <span class="built_in">bind</span>(s_fd,(struct sockaddr*)&amp;s_addr,s_len);// 绑定套接字与设置的端口号</span><br><span class="line">   <span class="keyword">if</span>(fd&lt;0)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;bind error %d\n&quot;</span>,fd);</span><br><span class="line">   close(s_fd);</span><br><span class="line">   <span class="built_in">return</span> 0;</span><br><span class="line">   &#125;</span><br><span class="line">   listen(s_fd,10);// 监听状态，守候进程</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;please wait a moment!\n&quot;</span>);</span><br><span class="line">   c_len = sizeof(c_addr);</span><br><span class="line">   c_fd = accept(s_fd,(struct sockaddr*)&amp;c_addr,(socklen_t *__restrict)&amp;c_len); //接收客户端连接请求</span><br><span class="line">   <span class="keyword">if</span>(c_fd&lt;0)&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;accept error\n&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   recv(c_fd,buf,100,0);   //接收消息</span><br><span class="line">   sendsum=0;</span><br><span class="line">   <span class="keyword">for</span>(count=0;count&lt;10;count++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;receive message:\n %d\n&quot;</span>,buf[count]);//输出到终端</span><br><span class="line">       sendsum+=buf[count];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;sum= %d\n&quot;</span>,sendsum);//输出到终端</span><br><span class="line">   send(c_fd,&amp;sendsum,sizeof(sendsum),0);   //回复消息</span><br><span class="line">   close(c_fd);// 关闭socket连接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><a href="https://imgse.com/i/pCWDj6e"><img src="https://s1.ax1x.com/2023/07/11/pCWDj6e.png" alt="pCWDj6e.png"></a></p><p>客户端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;// 包含套接字函数库</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;// 包含AF_INET相关结构</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;// 包含AF_INET相关操作的函数</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 5210</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">   int count;</span><br><span class="line">   int sockfd;// 客户套接字标识符</span><br><span class="line">   int len;// 客户消息长度</span><br><span class="line">   struct sockaddr_in addr;// 客户套接字地址</span><br><span class="line">   int newsockfd;</span><br><span class="line">   int buf[10]=&#123;10,20,30,40,50,60,70,80,90,100&#125;;//要发送的消息</span><br><span class="line">   int len2;</span><br><span class="line">   int resum;  </span><br><span class="line">   sockfd = socket(AF_INET,SOCK_STREAM,0);// 创建套接字</span><br><span class="line">   addr.sin_family = AF_INET;// 客户端套接字地址中的域</span><br><span class="line">   addr.sin_addr.s_addr=htonl(INADDR_ANY);   </span><br><span class="line">   addr.sin_port =htons(PORT);// 客户端套接字端口</span><br><span class="line">   len = sizeof(addr);</span><br><span class="line">   newsockfd =connect(sockfd,(struct sockaddr*)&amp;addr,len);//发送连接服务器的请求</span><br><span class="line">   <span class="keyword">if</span> (newsockfd == -1) &#123;</span><br><span class="line">      perror(<span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">      <span class="built_in">return</span> 1;</span><br><span class="line">   &#125;</span><br><span class="line">   send(sockfd,buf,sizeof(buf),0); //发送消息</span><br><span class="line">   resum=0;</span><br><span class="line">   recv(sockfd,&amp;resum,sizeof(resum),0);//接收新消息</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;receive message:sum is %d\n&quot;</span>,resum);//输出到终端</span><br><span class="line">   close(sockfd);// 关闭连接</span><br><span class="line">   <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<br><a href="https://imgse.com/i/pCWrCkt"><img src="https://s1.ax1x.com/2023/07/11/pCWrCkt.png" alt="pCWrCkt.png"></a></p><h2 id="UDP套接字编程"><a href="#UDP套接字编程" class="headerlink" title="UDP套接字编程"></a>UDP套接字编程</h2><h3 id="UDP信息传送"><a href="#UDP信息传送" class="headerlink" title="UDP信息传送"></a>UDP信息传送</h3><p>描述：在Linux系统下，实现在两个远端计算机中通过UDP协议实现信息的传送（注意在运行客户端程序时需要传递一个IP地址参数，建议将回送地址“127.0.0.1”用于测试）。</p><p>服务端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 8886</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">struct sockaddr_in s_addr;//服务器地址结构</span><br><span class="line">struct sockaddr_in c_addr;//客户端地址结构</span><br><span class="line">int sock;//套接字描述符</span><br><span class="line">socklen_t addr_len;//地址结构长度</span><br><span class="line">int len;//接收到的消息字节数</span><br><span class="line">char buff[128];//存放接收消息的缓冲区</span><br><span class="line">int i;</span><br><span class="line">/* 在服务器端创建数据报模式的套接字。创建成功提示“create socket successfully”，否则输出错误并退出 */</span><br><span class="line">sock=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line"><span class="keyword">if</span>(sock&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create socket successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">/*清空地址结构*/</span><br><span class="line">memset(&amp;s_addr, 0, sizeof(struct sockaddr_in));</span><br><span class="line">/* 设置地址和端口信息。地址为本机任意地址，即INADDR_ANY；端口为 PORT，注意使用htons(PORT)转换为网络字节序*/</span><br><span class="line">s_addr.sin_family=AF_INET;</span><br><span class="line">s_addr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">s_addr.sin_port=htons(PORT);</span><br><span class="line">/* 绑定地址和端口信息，绑定成功输出“<span class="built_in">bind</span> address successfully”，否则输出错误提示并退出。 */</span><br><span class="line">i=<span class="built_in">bind</span>(sock,(struct sockaddr*)&amp;s_addr,sizeof(s_addr));</span><br><span class="line"><span class="keyword">if</span>(i&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind address fail\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind address successfully\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">/* 循环接收数据 */</span><br><span class="line">addr_len = sizeof(c_addr);</span><br><span class="line"><span class="keyword">while</span> (1) &#123;</span><br><span class="line">int  n;</span><br><span class="line">/*接收从地址结构为c_addr的远端机器发送过来的消息并放入buff缓冲区中*/</span><br><span class="line">len=recvfrom(sock,buff,128,0,(struct sock_addr*)&amp;c_addr,&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span> (len &lt; 0) &#123;//接收失败</span><br><span class="line">perror(<span class="string">&quot;recvfrom error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(errno);</span><br><span class="line">&#125;</span><br><span class="line">buff[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;收到来自远端计算机%s，端口号为%d的消息:\n%s\n\r&quot;</span>,inet_ntoa(c_addr.sin_addr), ntohs(c_addr.sin_port), buff);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 8886</span></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;//定义变量</span><br><span class="line">struct sockaddr_in s_addr;//套接字地址结构</span><br><span class="line">int sock;//套接字描述符</span><br><span class="line">int addr_len;//地址结构长度</span><br><span class="line">int len;//发送字节长度</span><br><span class="line">char buff[]=<span class="string">&quot;Hello everyone, nice to meet you!&quot;</span>;//发送的消息</span><br><span class="line">/* 创建数据报模式的套接字 */</span><br><span class="line"><span class="keyword">if</span> ((sock = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) == -1) &#123;</span><br><span class="line">perror(<span class="string">&quot;socket error&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(errno);</span><br><span class="line">&#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;create socket successful.\n\r&quot;</span>);</span><br><span class="line">/* 设置对方地址和端口信息 */</span><br><span class="line">s_addr.sin_family = AF_INET; //地址族</span><br><span class="line"><span class="keyword">if</span> (argv[2])</span><br><span class="line">s_addr.sin_port = htons(atoi(argv[2]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s_addr.sin_port = htons(PORT);</span><br><span class="line"><span class="keyword">if</span> (argv[1])</span><br><span class="line">s_addr.sin_addr.s_addr = inet_addr(argv[1]);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有输入消息的接受者！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(0);</span><br><span class="line">&#125;</span><br><span class="line">addr_len = sizeof(s_addr);//地址结构长度</span><br><span class="line">/*从客户端的buff缓冲区中发送消息到地址结构为s_addr的远端机器*/</span><br><span class="line">len = sendto(sock,buff,sizeof(buff),0,(struct sockaddr*)&amp;s_addr,addr_len);</span><br><span class="line"><span class="keyword">if</span> (len &lt; 0) &#123;//如果发送失败</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\rsend error.\n\r&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send success.\n\r&quot;</span>);//发送成功</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端运行结果：<br><a href="https://imgse.com/i/pCWrtB9"><img src="https://s1.ax1x.com/2023/07/11/pCWrtB9.png" alt="pCWrtB9.png"></a></p><h3 id="服务器回显"><a href="#服务器回显" class="headerlink" title="服务器回显"></a>服务器回显</h3><p>描述：用UDP实现一个服务器的回显功能，即客户端输入字符串并发送给服务器端后，服务器端返回相同的字符串给客户端。要求在服务器端和客户端都打印出所收到的字符串。</p><p>服务器端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 8848</span></span><br><span class="line"><span class="comment">#define buflen 256</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int sock;</span><br><span class="line">struct sockaddr_in saddr;</span><br><span class="line">struct sockaddr_in caddr;</span><br><span class="line">int clen;</span><br><span class="line">char buf[256];</span><br><span class="line">sock=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line"><span class="keyword">if</span>(sock&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sock error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">bzero(&amp;saddr,sizeof(saddr));</span><br><span class="line">saddr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line">saddr.sin_port=htons(PORT);</span><br><span class="line">saddr.sin_family=AF_INET;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">bind</span>(sock,(struct sockaddr*)&amp;saddr,sizeof(saddr))&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line">int n,m;</span><br><span class="line">bzero(&amp;caddr,sizeof(caddr));</span><br><span class="line">clen=sizeof(caddr);</span><br><span class="line">n=recvfrom(sock,buf,buflen,0,(struct sockaddr*)&amp;caddr,&amp;clen);</span><br><span class="line"><span class="keyword">if</span>(n&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv error %d\n&quot;</span>,n);</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">buf[buflen]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv:%s\n&quot;</span>,buf);</span><br><span class="line">m=sendto(sock,buf,n,0,(struct sockaddr*)&amp;caddr,clen);</span><br><span class="line"><span class="keyword">if</span>(m&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send error\n&quot;</span>);</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">bzero(buf,sizeof(buf));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;netinet/in.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/socket.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;errno.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#define PORT 8848</span></span><br><span class="line"><span class="comment">#define buflen 256</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">int sock;</span><br><span class="line">struct sockaddr_in caddr;</span><br><span class="line">struct sockaddr_in saddr;</span><br><span class="line">int n,m;</span><br><span class="line">char buf[buflen];</span><br><span class="line">char input[256];</span><br><span class="line">int slen;</span><br><span class="line">sock=socket(AF_INET,SOCK_DGRAM,0);</span><br><span class="line"><span class="keyword">if</span>(sock&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sock error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">bzero(&amp;caddr,sizeof(caddr));</span><br><span class="line">caddr.sin_family=AF_INET;</span><br><span class="line">caddr.sin_port=htons(PORT);</span><br><span class="line">caddr.sin_addr.s_addr=htonl(INADDR_ANY);</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">scanf(<span class="string">&quot;%s&quot;</span>,input);</span><br><span class="line">n=sendto(sock,input,sizeof(input),0,(struct sockaddr*)&amp;caddr,sizeof(caddr));</span><br><span class="line"><span class="keyword">if</span>(n&lt;0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send error\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">bzero(&amp;saddr,sizeof(saddr));</span><br><span class="line">slen=sizeof(saddr);</span><br><span class="line">m=recvfrom(sock,buf,n,0,(struct sockaddr*)&amp;saddr,&amp;slen);</span><br><span class="line"><span class="keyword">if</span>(m&lt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv error\n&quot;</span>);</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">buf[m]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;recv from s:%s\n&quot;</span>,buf);</span><br><span class="line">bzero(buf,sizeof(buf));</span><br><span class="line">bzero(input,sizeof(input));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><a href="https://imgse.com/i/pCWr49f"><img src="https://s1.ax1x.com/2023/07/11/pCWr49f.png" alt="pCWr49f.png"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、理解udp与tcp的区别，udp服务器端不需要调用listen、accept函数监听，udp客户端不需要调用connect建立三次握手。<br>2、udp调用recvfrom时，需要事先对地址长度赋值，否则返回-1，接收失败。<br>3、如果是多次循环接收，需要对缓冲区进行清空，以免出现错乱。<br>4、服务器端和客户端用于收发信息的函数是相同的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket基本编程</title>
      <link href="/2023/07/11/socket%E5%9F%BA%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/07/11/socket%E5%9F%BA%E6%9C%AC%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="socket字节序"><a href="#socket字节序" class="headerlink" title="socket字节序"></a>socket字节序</h2><h3 id="大端小端"><a href="#大端小端" class="headerlink" title="大端小端"></a>大端小端</h3><p>描述：编写一个程序， 判断主机的字节序为小端模式还是大端模式。若主机字节序为小端模式，请将16进制数0x0010转换为网络字节序并打印。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;arpa/inet.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">unsigned short a=1;</span><br><span class="line">short b=0x0010;</span><br><span class="line"><span class="keyword">if</span>(a&gt;&gt;8)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;big\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;little\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x \n&quot;</span>,htons(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端运行结果：<br><a href="https://imgse.com/i/pCWBuuj"><img src="https://s1.ax1x.com/2023/07/11/pCWBuuj.png" alt="pCWBuuj.png"></a></p><h3 id="网络地址访问"><a href="#网络地址访问" class="headerlink" title="网络地址访问"></a>网络地址访问</h3><p>描述：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;arpa/inet.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;string.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">char s1[]=<span class="string">&quot;172.17.0.1&quot;</span>;</span><br><span class="line">char s2[20];</span><br><span class="line">//char *s3;</span><br><span class="line">//long l1,l2;</span><br><span class="line">struct in_addr s;</span><br><span class="line">//inet_aton(s1,&amp;s);</span><br><span class="line">inet_pton(AF_INET,s1,&amp;s);</span><br><span class="line">//l1=inet_addr(s1);</span><br><span class="line">//printf(<span class="string">&quot;%ld\n&quot;</span>,l1);</span><br><span class="line">//memcpy(&amp;s,&amp;l1,4);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%x \n&quot;</span>,s.s_addr);</span><br><span class="line"></span><br><span class="line">//s3=inet_ntoa(s);</span><br><span class="line">inet_ntop(AF_INET,&amp;s,s2,sizeof(s2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s \n&quot;</span>,s2);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><a href="https://imgse.com/i/pCWBar9"><img src="https://s1.ax1x.com/2023/07/11/pCWBar9.png" alt="pCWBar9.png"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、理解数据在网络传输和系统本地存储的形式，大端小端的区别，以及之间的相互转化关系。<br>2、需要熟悉网络ip地址和数据向大端小端转换的原理及相关的调用函数。<br>3、在实际应用中，ip和数据都是以小端方式存储本地，大端方式在网络中传输，进行网络编程时，需要注意这之间的数据转换。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux线程操作</title>
      <link href="/2023/07/11/Linux%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/07/11/Linux%E7%BA%BF%E7%A8%8B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="线程创建与参数传递"><a href="#线程创建与参数传递" class="headerlink" title="线程创建与参数传递"></a>线程创建与参数传递</h2><p>描述：使用pthread_create函数循环创建5个线程，然后每次在创建线程时将当前循环计数器的值通过pthread_create的arg参数传递给新线程，在线程中打印输出该计数器的值。<br>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line">void *run(void *arg)&#123;</span><br><span class="line">int* r=arg;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pthread %lu count = %d\n&quot;</span>,pthread_self(),*r);</span><br><span class="line">usleep(1);</span><br><span class="line">&#125;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">pthread_t t[5];</span><br><span class="line">int i;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;5;i++)&#123;</span><br><span class="line">pthread_create(&amp;t[i],NULL,(void*)run,&amp;i);</span><br><span class="line"><span class="built_in">sleep</span>(1);</span><br><span class="line">&#125;</span><br><span class="line">pthread_join(t[0],NULL);</span><br><span class="line">pthread_join(t[1],NULL);</span><br><span class="line">pthread_join(t[2],NULL);</span><br><span class="line">pthread_join(t[3],NULL);</span><br><span class="line">pthread_join(t[4],NULL);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端运行结果：<br><a href="https://imgse.com/i/pCW0cBn"><img src="https://s1.ax1x.com/2023/07/11/pCW0cBn.png" alt="pCW0cBn.png"></a></p><h2 id="加入互斥锁"><a href="#加入互斥锁" class="headerlink" title="加入互斥锁"></a>加入互斥锁</h2><p>由不同线程实现一个同步的卖货程序。伙计在卖商品时，每次卖出50元的货物就要收50元的钱，老板每隔一秒钟就要去清点店里的货物和金钱的总和，看总和有没有少。我们可以创建两个线程，一个线程代表伙计卖货收钱这个事务，另一个线程模拟老板验证总和的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line">int a = 200;  </span><br><span class="line">int b = 100; </span><br><span class="line">pthread_mutex_t mutex;</span><br><span class="line">void *ThreadA(void* d)  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sale stop!\n&quot;</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">a -= 50; </span><br><span class="line"></span><br><span class="line">b += 50;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sale shengyu  %d\n&quot;</span>,a);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;money  get  %d\n&quot;</span>,b);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void *ThreadB(void* d) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (1)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;check a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;check b = %d\n&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"><span class="keyword">if</span>(a&lt;=0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;check stop\n&quot;</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sleep</span>(1);    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">pthread_t tida, tidb;</span><br><span class="line">pthread_mutex_init(&amp;mutex,NULL);</span><br><span class="line">pthread_create(&amp;tida, NULL,(void*) ThreadA, NULL); </span><br><span class="line">pthread_create(&amp;tidb, NULL, (void*)ThreadB, NULL); </span><br><span class="line">pthread_join(tida, NULL);</span><br><span class="line">pthread_join(tidb, NULL);</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终端运行结果：<br><a href="https://imgse.com/i/pCW0HBR"><img src="https://s1.ax1x.com/2023/07/11/pCW0HBR.png" alt="pCW0HBR.png"></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.理解线程与进程的区别，在运行过程中，线程之间的相互通信通常是对临界资源的访问，线程的运行范围是create时传给的函数。<br>2.临界资源通常与互斥锁同时使用，防止访问数据出现错乱。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客部署</title>
      <link href="/2023/07/11/hello-world/"/>
      <url>/2023/07/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程间通信</title>
      <link href="/2023/07/11/Linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/07/11/Linux%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="信号通信"><a href="#信号通信" class="headerlink" title="信号通信"></a>信号通信</h2><p>描述：编写一个程序，使用signal函数捕获从终端键入“CtrI+c”时产生的SIGINT信号，并执行自己定义的信号处理函数；在信号处理函数中打印1到100累加求和的结果。<br>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;signal.h&gt;</span></span><br><span class="line">typedef void (*sighander_t)(int);</span><br><span class="line">static void sig_handle(int signo)&#123;</span><br><span class="line"><span class="keyword">if</span>(SIGINT==signo)&#123;</span><br><span class="line">int i,ans=0;</span><br><span class="line"><span class="keyword">for</span>(i=0;i&lt;=100;i++)&#123;</span><br><span class="line">ans+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;signal 100 sum=%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;reseve %d\n&quot;</span>,signo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)&#123;</span><br><span class="line">sighander_t ret;</span><br><span class="line">ret=signal(SIGINT,sig_handle);</span><br><span class="line"><span class="keyword">if</span>(SIG_ERR==ret)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在linux终端运行该程序:<br><img src="/images/linux51.png" alt="图片"></p><h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><p>描述：用命名管道实现没有亲缘关系的两个进程间的通信:让进程1读取键盘键入的字符串，并将这些字符串写入管道;进程2将管道中的数据读取出来并打印。<br>具体分开为两个程序写，一个为read一个为write部分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Write；</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int fd;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;OK\n&quot;</span>);</span><br><span class="line">fd=open(<span class="string">&quot;./ww&quot;</span>,O_WRONLY);</span><br><span class="line">char buf[20];</span><br><span class="line"><span class="keyword">if</span>(fd&lt;0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line">scanf(<span class="string">&quot;%s&quot;</span>,buf);</span><br><span class="line">int i;</span><br><span class="line">i=write(fd,buf,sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(i&gt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;write %d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Read：</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">int fd;</span><br><span class="line">fd=open(<span class="string">&quot;./ww&quot;</span>,O_RDONLY);</span><br><span class="line">char buf[20];</span><br><span class="line"><span class="keyword">if</span>(fd&lt;0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;open error\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(1)&#123;</span><br><span class="line">int i;</span><br><span class="line">i=<span class="built_in">read</span>(fd,buf,sizeof(buf));</span><br><span class="line"><span class="keyword">if</span>(i&gt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;read %d,%s\n&quot;</span>,i,buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/linux52.png" alt="图片"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>（1）熟悉命名管道的程序操作流程与原理。<br>（2）如果是已经存在了管道文件，则在程序中调用mkfifo函数运行会报错。<br>（3）在实验过程中出现bug，需要最小化程序简化流程，排查错误。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux进程操作</title>
      <link href="/2023/07/11/Linux%E8%BF%9B%E7%A8%8B/"/>
      <url>/2023/07/11/Linux%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="在Linux下进程相关的编程操作和程序编写"><a href="#在Linux下进程相关的编程操作和程序编写" class="headerlink" title="在Linux下进程相关的编程操作和程序编写"></a>在Linux下进程相关的编程操作和程序编写</h2><h3 id="在终端创建c文件，编写代码，实现父进程子进程分别各自显示pid、ppid"><a href="#在终端创建c文件，编写代码，实现父进程子进程分别各自显示pid、ppid" class="headerlink" title="在终端创建c文件，编写代码，实现父进程子进程分别各自显示pid、ppid"></a>在终端创建c文件，编写代码，实现父进程子进程分别各自显示pid、ppid</h3><p>代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line">int main(void)&#123;</span><br><span class="line">pid_t pid;</span><br><span class="line">pid=fork();</span><br><span class="line"><span class="keyword">if</span>(pid==-1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid==0)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;child process pid= %d ppid=%d\n&quot;</span>,pid,getppid());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">sleep</span>(1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;parent process pid= %d ppid=%d\n&quot;</span>,pid,getppid());</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/images/1.png" alt="图片"></p><h3 id="实现多进程分别运行1-100累加计算和调用exec（）函数族运行系统ls指令"><a href="#实现多进程分别运行1-100累加计算和调用exec（）函数族运行系统ls指令" class="headerlink" title="实现多进程分别运行1-100累加计算和调用exec（）函数族运行系统ls指令"></a>实现多进程分别运行1-100累加计算和调用exec（）函数族运行系统ls指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/wait.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;sys/types.h&gt;</span></span><br><span class="line">int main(void)&#123;</span><br><span class="line">pid_t pid;</span><br><span class="line">pid =fork();</span><br><span class="line"><span class="keyword">if</span>(-1==pid)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error!!!\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pid==0)&#123;</span><br><span class="line">int i,ans;</span><br><span class="line">ans=0;</span><br><span class="line"><span class="keyword">for</span>(i=1;i&lt;=100;i++)&#123;</span><br><span class="line">ans+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum answer=%d\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pid finish\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pid_t p1,p2;</span><br><span class="line">pid_t pid1;</span><br><span class="line">pid1=fork();</span><br><span class="line"><span class="keyword">if</span>(pid1==0)&#123;</span><br><span class="line">              char *args[]=&#123;<span class="string">&quot;/bin/ls&quot;</span>,<span class="string">&quot;-a&quot;</span>,<span class="string">&quot;-l&quot;</span>,NULL&#125;;</span><br><span class="line">              <span class="keyword">if</span>(execve(<span class="string">&quot;/bin/ls&quot;</span>,args,NULL)&lt;0)&#123;</span><br><span class="line">                      <span class="built_in">printf</span>(<span class="string">&quot;pid1 error!!\n&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">return</span> 0;</span><br><span class="line">        &#125;</span><br><span class="line">p1=waitpid(pid,NULL,0);</span><br><span class="line">p2=waitpid(pid1,NULL,0);</span><br><span class="line"><span class="keyword">if</span>(p1&gt;0&amp;&amp;p2&gt;0)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;finish\n&quot;</span>);</span><br><span class="line"><span class="built_in">return</span> 0;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;finish error!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2.png" alt="图片"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.多进程编程需要注意创造的子进程是从父进程代码的哪里开始向下运行的，如第二题就需要分清第一个子进程和第二个子进程在父进程分别创建的位置。<br>2.熟悉理解fork、exec函数族等进程操作函数的用法和参数规则。<br>3.在进行多进程编程前需要明确子进程的创建逻辑，防止因思路不清导致程序bug。</p>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件读写 </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo站点一些操作</title>
      <link href="/2023/07/11/hexo%E7%AB%99%E7%82%B9%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/07/11/hexo%E7%AB%99%E7%82%B9%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="部署时遇到的坑"><a href="#部署时遇到的坑" class="headerlink" title="部署时遇到的坑"></a>部署时遇到的坑</h2><p>第一次部署hexo+github博客，不熟练导致遇到了许多问题，最常见遇到的就是：</p><h3 id="Hexo-d-报错-无法连接-（前提已配置ssh密钥、config文件）"><a href="#Hexo-d-报错-无法连接-（前提已配置ssh密钥、config文件）" class="headerlink" title="Hexo d 报错 无法连接 （前提已配置ssh密钥、config文件）"></a>Hexo d 报错 无法连接 （前提已配置ssh密钥、config文件）</h3><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;printwyy”</span></span><br><span class="line"><span class="string">git config --global user.password “github上申请的token”</span></span><br></pre></td></tr></table></figure><h3 id="hexo-d-一直显示连接超时，找到两种解决方案："><a href="#hexo-d-一直显示连接超时，找到两种解决方案：" class="headerlink" title="hexo d 一直显示连接超时，找到两种解决方案："></a>hexo d 一直显示连接超时，找到两种解决方案：</h3><p>（1）在终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy</span><br></pre></td></tr></table></figure><p>（2）用ssh方法连（可能https容易被墙）</p><h2 id="hexo写作步骤"><a href="#hexo写作步骤" class="headerlink" title="hexo写作步骤"></a>hexo写作步骤</h2><p>现在进入正题，具体操作如下</p><h3 id="通过terminal进入本地博客根目录，然后输入："><a href="#通过terminal进入本地博客根目录，然后输入：" class="headerlink" title="通过terminal进入本地博客根目录，然后输入："></a>通过terminal进入本地博客根目录，然后输入：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><h3 id="将写好的新博客更新到github上："><a href="#将写好的新博客更新到github上：" class="headerlink" title="将写好的新博客更新到github上："></a>将写好的新博客更新到github上：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    （清理缓存，可选用）</span><br><span class="line">hexo g     （生成资源文件）</span><br><span class="line">hexo d （部署到服务器）</span><br></pre></td></tr></table></figure><p>当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</p><h3 id="对分支进行部署更新："><a href="#对分支进行部署更新：" class="headerlink" title="对分支进行部署更新："></a>对分支进行部署更新：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A （添加所有文件到暂存区）</span><br><span class="line">git commit -m &quot;自定义信息&quot; （提交此次更新的信息）</span><br><span class="line">git push origin main （推送分支到Github）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
